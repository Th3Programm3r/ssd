syntax = "proto3";

package kademlia;
import "google/protobuf/timestamp.proto";

service KademliaService {
  rpc Ping(PingRequest) returns (PingResponse);
  rpc AddNode(NodeGrpc) returns (AddNodeResponse);
  rpc AddNodeToRoutingTable(NodeGrpc) returns (AddNodeResponse);
  rpc RemoveNode(NodeGrpc) returns (RemoveNodeResponse);
  rpc FindClosestNode(FindRequest) returns (NodeGrpc);
  rpc GetRoutingTable(Empty) returns (RoutingTableResponse);
  rpc GetSelfNode(Empty) returns (NodeGrpc);
  rpc BroadcastAuction(BlockGrpc) returns (AuctionResponse);
  rpc FindNode(NodeGrpc) returns (NodeGrpc);
  rpc PrintRoutingTable(Empty) returns (PrintRoutingTableResponse);
  rpc GetAuctions(Empty) returns (GetAuctionsResponse);
  rpc SendBid(BlockGrpc) returns (SendBidResponse);
  rpc GetLastBlockFromAuction(AuctionGrpc) returns (BlockGrpc);
  rpc AddBlockChains(BlockChainMap) returns (AddBlockChainsResponse);
  rpc GetBlockChains(Empty) returns (BlockChainMap);
  rpc FindNodeByHash(HashGrpc) returns (NodeGrpc);
  rpc AddAuction(BlockGrpc) returns (AuctionResponse);
  rpc AddBid(BlockGrpc) returns (SendBidResponse);
  rpc ListenForBidNotifications(SubscribeRequest) returns (stream BidNotification);
  rpc EndAuction(BlockGrpc) returns (SendBidResponse);
  rpc BroadcastRemoveNode(NodeGrpc) returns (RemoveNodeResponse);
  rpc EndAuctionFromScript(BlockGrpc) returns (SendBidResponse);
}

message NodeGrpc {
  string id = 1;
  string ip = 2;
  int32 port = 3;
  string publicKey=4;
  int32 reputation=5;
}

message PingRequest {
  string id = 1;
}

message PingResponse {
  string message = 1;
}

message AddNodeResponse {
  string message = 1;
}

message RemoveNodeResponse {
  string message = 1;
}

message FindRequest {
  string targetId = 1;
}

message Empty {}

message RoutingTableResponse {
  repeated NodeGrpc nodes = 1;
}


message AuctionGrpc {
  int32 id = 1;
  repeated BidGrpc bids = 2;
  repeated ProductGrpc products = 3;
  int32 hoursToCloseAuction = 4;
  string senderHash = 5;
  google.protobuf.Timestamp creationTimeStamp = 6;
  repeated string participants= 7;
  bool active = 8;
}

message BidGrpc {
  int32 id = 1;
  int32 productId = 2;
  float bidValue = 3;
  string sender = 4;
  int32 auctionId = 5;
}

message ProductGrpc {
  int32 id = 1;
  string name = 2;
  float initialPrice = 3;
  float finalPrice = 4;
}

message AuctionResponse {
  string message = 1;
}

message PrintRoutingTableResponse {
  string message = 1;
}


message GetAuctionsResponse {
  repeated AuctionGrpc auctions = 1;
}

message SendBidResponse{
  string message = 1;
}


message BlockGrpc {
  int32 index = 1;
  int64 timestamp = 2;
  AuctionGrpc auction = 3;
  string previousHash = 4;
  string hash = 5;
  string signature = 6;
}

message BlockAck {
  bool success = 1;
  string message = 2;
}

message BlockHash{
  string blockHash = 1;
}


message BlockChainMap {
  map<int32, BlockChainGrpc> blockChain = 1;
}

message AddBlockChainsResponse {
  bool success = 1;
  string message = 2;
}

message BlockChainGrpc{
  repeated BlockGrpc chain=1;
}

message HashGrpc {
  string hash=1;
}


message SubscribeRequest {
  string nodeId = 1;
}

message BidNotification {
  string message = 1;
}

